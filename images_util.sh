#!/bin/bash

# Copyright (c) 2025 Free Software Foundation, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

#
# This program manages common tasks for attempting to build Lineage
# for multiple devices. It assumes a directory tree of vendor/model
# for the images, which contain the zip files of Lineage install packages.
#

# This should be executed from the top level directory where you
# run repo from. Adjust these paths to customize.
images="/work/Lineage-images"
if test x"${LINEAGE}" = x; then
    lineage="/work/Lineage-22.2"
else
    lineage="${LINEAGE}"
fi
# dryrun="echo DEBUG: "
dryrun=""

version=22.2
tmp="/tmp/xx.$$"
log="lineage.log"
# The list of devices as generated by the link function.
devlist="$(dirname $0)/phone_tools/devices.lst"
total=$(wc -l ${devlist} | cut -d ' ' -f 1)
verbose=0
# Use arrays to map vendor, build, and model names between them.
declare -Ag bldnames
declare -Ag modnames
declare -Ag vendnames

rm -f ${log}

# Simple error reporting function
errmsg() {
    echo "ERROR: $1"
    echo "ERROR: $1" >> ${log}
}

# Simple warning reporting function
warnmsg() {
    if test ${verbose} -gt 0; then
       echo "WARNING: $1"
    fi
    echo "WARNING: $1" >> ${log}
}

# Simple logging function
logmsg() {
    if test ${verbose} -gt 0; then
       echo "$1"
    fi
    echo "$1" >> ${log}
}

# Simple mapping between build names and device model names.
load_devlist() {
    while read -r line; do
	vendor=$(echo ${line} | cut -d ':' -f 1)
	build=$(echo ${line} | cut -d ':' -f 2)
	model=$(echo ${line} | cut -d ':' -f 3)
	vendnames[${build}]=$(echo ${vendor} | tr '[:upper:]' '[:lower:]')
	bldnames[${build}]=${model}
	modnames[${model}]=${build}
    done < ${devlist}
}

# Construct the path to files
path() {
    build=${1}
    echo "${vendnames[${build}]}/${bldnames[${build}]}"
}

# Remove all files left from file extraction
remove() {
    builds=${1:-${modnames[*]}}
    for i in ${builds}; do
	dir=$(path $i)
	logmsg "Removing junk files from ${dir}"
	${dryrun} sudo extractor -v -r ${dir}
    done
}

# Unmount file systems
unmount() {
    builds=${1:-${modnames[*]}}
    for i in ${builds}; do
	dir=$(path $i)
	logmsg "Unmounting ${images}/${dir}"
	${dryrun} sudo extractor -v -u ${images}/${dir}
    done
}

# Import files into a database
import_blobs() {
    logmsg "Importing ${total} devices..."
    builds=${1:-${modnames[*]}}
    for i in ${builds}; do
	dir=$(dirname $(path ${i}))
	# clone ${i}
	# dir="$(dirname $(path $i))"
	blddir="${images}/blobs/${dir}/${i}"
	# blddir="${images}/${dir}/${i}"
	${dryrun} import-device -v -i ${blddir}
	${dryrun} extractor -v -u ${blddir}
	total=$(expr ${total} - 1)
	logmsg "${total} devices left to build..."
    done
}

# Extract files from the unzipped install package
extract() {
    logmsg "Extracting files from ${total} devices..."
    builds=${1:-${modnames[*]}}
    for i in ${builds}; do
	dir=$(path ${i})
	logmsg "Extracting files from ${images}/${dir}"
	# See if it's already been unzipped
	if test ! -e "${images}/${dir}/payload.bin"; then
	    # ${dryrun} extractor -v -r ${images}/${dir}
	    ${dryrun} extractor -v -z ${images}/${dir}
	fi
	# When Lineage extracts files, it deletes the system.img
	# files. So if this exists, we don't need to extract everything
	# again. A small time saver when processing all 210 devices.
	if test ! -e "${dir}/system.img"; then
	    # ${dryrun} extractor -v -r ${images}/${dir}
	    ${dryrun} extractor -v -e ${images}/${dir}
	fi
	${dryrun} extractor -v -u ${images}/${dir}
	total=$(expr ${total} - 1)
	logmsg "${total} devices left to build..."
    done
}

# Extract files from the unzipped install package
clone() {
    logmsg "Cloning mounted files from ${total} devices..."
    builds=${1:-${modnames[*]}}
    for i in ${builds}; do
	blddir=$(path ${i})
	model=$(basename ${blddir})
	logmsg "Extracting proprietary files from ${blddir}"
	# blddir="$(dirname ${blddir})/${build}"
	${dryrun} extractor -v -z ${images}/${blddir}
	${dryrun} extractor -v -e ${images}/${blddir}
	${dryrun} sudo extractor -v -c ${images}/${blddir} -o ${images}/blobs
	total=$(expr ${total} - 1)
	logmsg "${total} devices left to build..."
    done
}

# Attempt to build a device
build() {
    logmsg "Building ${total} devices..."
    # Load Lineage setup
    source build/envsetup.sh

    builds=${1:-${modnames[*]}}
    for device in ${builds}; do
	vendor="$(echo ${device} | cut -d '|' -f 1 | tr '[:upper:]' '[:lower:]' | tr -d ' ')"
	model="$(echo ${device} | cut -d '|' -f 2 | tr -d ' ')"
	build="$(echo ${device} | cut -d '|' -f 3 | tr -d ' ')"
	# these cause trouble at build time, ie... mka -j 8
	## rm -fr {vendor,device}/{xiaomi,motorola}
	logmsg "--------------------------------"
	dir="${lineage}/${vendor}/${build}"
	tmpfile="/tmp/build.${build}"
	logmsg "Configuring ${vendor} ${model} ${build}..."
	${dryrun} breakfast ${build} eng
	if test ! -e device/${vendor}/${build} -a x${debug} = x; then
	    errmsg "Breakfast ${build} failed!"
	    continue
	fi
	logmsg "Breakfast first pass sucessful for ${build}"
	echo "Extracting blobs ${vendor} ${device} ${build}..."
	if test x"${dryrun}" = x; then
	    if test ! -e ${dir}/system.img;then
		errmsg "Files haven't been extracted for ${build}!"
		continue
	    fi
	    ./extract-files.py ${dir} >& ${tmpfile}
	    if test $(grep -Ec "failed to build|Failed to run command|KeyboardInterrupt|Some files failed to process|No such file or directory" ${tmpfile}) -gt 0 -a x"${dryrun}" = x; then
		errmsg "Couldn't extract blobs for ${vendor} ${device} ${build}"
		continue
	    else
		logmsg "Extracting files was sucessful for ${build}"
	    fi
	    # rm -f ${tmpfile}
	else
	    logmsg "Debug mode is on, so no file extraction"
	fi
	
	${dryrun} breakfast ${build} eng
	logmsg "Breakfast second pass sucessful for ${build}"
	# Clean up the old build
	rm -fr vendor/${vendor}/${build}
	logmsg "Building ${vendor} ${device} ${build}..."
	mka -j 8 >& ${tmpfile}
	if test $(tail -1 ${tmpfile} | grep -c "succeeded") -eq 0 -a x"${dryrun}" = x; then
	    errmsg "${vendor} ${device} ${build} failed to build"
	else
	    logmsg "${vendor} ${device} ${build} built successfully!"
	fi
	${dryrun} taskset -c 0-7 brunch ${build}
	total=$(expr ${total} - 1)
	logmsg "${total} devices left to build..."
    done
}

# Symbolically link the build name to the device name
link() {
    find ${images} -name lineage*${version}*.zip > ${tmp}

    rm -f ${devlist}
    touch ${devlist}
    while read -r line; do
	dir=$(dirname ${line})
	vendor=$(echo ${line} | cut -d '/' -f 4)
	build=$(basename ${line} | cut -d '-' -f 5)
	model=$(basename ${dir})
	logmsg "Linking ${build} to ${dir} in $PWD"
	${dryrun} ln -sf ${dir} ${images}/${vendor}/${build}
	echo "${vendor}:${build}:${model}" >> /tmp/xx
    done < ${tmp}
    sort /tmp/xx | uniq > ${devlist}

    # FIXME: where is this link coming from ? Delete
    # them till fixed.
    find . -mindepth 3 -type l -exec rm {} \;
}

# Display help messages
usage() {
    echo "--help (-h): Display help screen"
    echo "--verbose (-v): Verbose output"
    echo "--dryrun (-d): Just dry run,don't execute anything"
    echo "--remove (-r): Remove all generated files"
    echo "--link (-l): Link build names to device name"
    echo "--extract (-e): Extract files from package"
    echo "--clone (-c): Clone files"
    echo "--unmount (-u): Unmount all device filesystems"
    echo "--build (-b): Build packages"
    echo "--import (-i): Import blobs into a database"
    echo "--file (-f): Process a specific file instead of all devices, for debugging"
    echo "--all (-a): Do everything, which takes a long time"
   }

# A command is required
if test $# -eq 0; then
    usage
    exit
fi

# Create the device list if it doesn't exist.
if test ! -e ${devlist}; then
    link
fi
# Load the list of device metadata
load_devlist

device=""
# Process command line arguments
while test $# -gt 0; do
    case "$1" in
	-v|--verbose)
	    verbose=1
	    ;;
	-h|--help)
	    usage
	    exit 0
	    ;;
	-d|--dryrun)
	    dryrun="echo DEBUG: "
	    verbose=1
	    log="lineage-debug.log"
	    ;;
	-f|--file)
	    shift
	    device=$1
	    total=1
	    ;;
	-r|--remove)
	    remove ${device}
	    ;;
	-l|--link)
	    link
	    ;;
	-e|--extract)
	    extract ${device}
	    ;;
	-u|--unmount)
	    unmount ${device}
	    ;;
	-b|--build)
	    build ${device}
	    ;;
	-i|--import)
	    import_blobs ${device}
	    ;;
	-c|--clone)
	    clone ${device}
	    unmount
	    ;;
	-a|--all)
	    echo "This may take hours or days to complete!"
	    link
	    extract
	    build
	    ;;
    esac
    shift
done
